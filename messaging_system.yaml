AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'DynamoDBFullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:*'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  MessagingSystemLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'messaging-system-lambda'
      Handler: 'messaging_system.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.12'
      Code:
        S3Bucket: 'cloud-computing-hw2'
        S3Key: 'messaging_system.zip'
      Environment:
        Variables:
          CHATS_TABLE: 'chats'
          USERS_TABLE: 'users'
      Timeout: 30
  ChatsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'chats'
      AttributeDefinitions:
        - AttributeName: 'chat_id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'chat_id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  UsersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'users'
      AttributeDefinitions:
        - AttributeName: 'user_id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'user_id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  ApiGatewayHttpApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: 'MessagingSystemHttpApi'
      ProtocolType: 'HTTP'
  ApiGatewayIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref ApiGatewayHttpApi
      IntegrationType: 'AWS_PROXY'
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagingSystemLambda.Arn}/invocations'
      PayloadFormatVersion: '2.0'
  ApiGatewayRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref ApiGatewayHttpApi
      RouteKey: 'POST /messaging-system/{action+}'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'
  ApiGatewayStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref ApiGatewayHttpApi
      StageName: 'prod'
      AutoDeploy: true
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MessagingSystemLambda
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHttpApi}/prod/POST/messaging-system/*'
Outputs:
  LambdaFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref MessagingSystemLambda
  ApiEndpoint:
    Description: 'Messaging System API endpoint URL'
    Value: !Sub 'https://${ApiGatewayHttpApi}.execute-api.${AWS::Region}.amazonaws.com/prod/messaging-system/{action+}'
